import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service for conversational search.
 * @class
 * @memberof v1alpha
 */
export declare class ConversationalSearchServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    private _log;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    conversationalSearchServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ConversationalSearchServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ConversationalSearchServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Converses a conversation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Conversation to get. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
     *   Use
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
     *   to activate auto session mode, which automatically creates a new
     *   conversation inside a ConverseConversation session.
     * @param {google.cloud.discoveryengine.v1alpha.TextInput} request.query
     *   Required. Current user input.
     * @param {string} request.servingConfig
     *   The resource name of the Serving Config to use. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/servingConfigs/{serving_config_id}`
     *   If this is not set, the default serving config will be used.
     * @param {google.cloud.discoveryengine.v1alpha.Conversation} request.conversation
     *   The conversation to be used by auto session only. The name field will be
     *   ignored as we automatically assign new name for the conversation in auto
     *   session.
     * @param {boolean} request.safeSearch
     *   Whether to turn on safe search.
     * @param {number[]} request.userLabels
     *   The user labels applied to a resource must meet the following requirements:
     *
     *   * Each resource can have multiple labels, up to a maximum of 64.
     *   * Each label must be a key-value pair.
     *   * Keys have a minimum length of 1 character and a maximum length of 63
     *     characters and cannot be empty. Values can be empty and have a maximum
     *     length of 63 characters.
     *   * Keys and values can contain only lowercase letters, numeric characters,
     *     underscores, and dashes. All characters must use UTF-8 encoding, and
     *     international characters are allowed.
     *   * The key portion of a label must be unique. However, you can use the same
     *     key with multiple resources.
     *   * Keys must start with a lowercase letter or international character.
     *
     *   See [Google Cloud
     *   Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
     *   for more details.
     * @param {google.cloud.discoveryengine.v1alpha.SearchRequest.ContentSearchSpec.SummarySpec} request.summarySpec
     *   A specification for configuring the summary returned in the response.
     * @param {string} request.filter
     *   The filter syntax consists of an expression language for constructing a
     *   predicate from one or more fields of the documents being filtered. Filter
     *   expression is case-sensitive. This will be used to filter search results
     *   which may affect the summary response.
     *
     *   If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
     *
     *   Filtering in Vertex AI Search is done by mapping the LHS filter key to a
     *   key property defined in the Vertex AI Search backend -- this mapping is
     *   defined by the customer in their schema. For example a media customer might
     *   have a field 'name' in their schema. In this case the filter would look
     *   like this: filter --> name:'ANY("king kong")'
     *
     *   For more information about filtering including syntax and filter
     *   operators, see
     *   [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)
     * @param {google.cloud.discoveryengine.v1alpha.SearchRequest.BoostSpec} request.boostSpec
     *   Boost specification to boost certain documents in search results which may
     *   affect the converse response. For more information on boosting, see
     *   [Boosting](https://cloud.google.com/retail/docs/boosting#boost)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.ConverseConversationResponse|ConverseConversationResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.converse_conversation.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_ConverseConversation_async
     */
    converseConversation(request?: protos.google.cloud.discoveryengine.v1alpha.IConverseConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.IConverseConversationResponse,
        (protos.google.cloud.discoveryengine.v1alpha.IConverseConversationRequest | undefined),
        {} | undefined
    ]>;
    converseConversation(request: protos.google.cloud.discoveryengine.v1alpha.IConverseConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IConverseConversationResponse, protos.google.cloud.discoveryengine.v1alpha.IConverseConversationRequest | null | undefined, {} | null | undefined>): void;
    converseConversation(request: protos.google.cloud.discoveryengine.v1alpha.IConverseConversationRequest, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IConverseConversationResponse, protos.google.cloud.discoveryengine.v1alpha.IConverseConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a Conversation.
     *
     * If the {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation} to
     * create already exists, an ALREADY_EXISTS error is returned.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Full resource name of parent data store. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {google.cloud.discoveryengine.v1alpha.Conversation} request.conversation
     *   Required. The conversation to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.create_conversation.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_CreateConversation_async
     */
    createConversation(request?: protos.google.cloud.discoveryengine.v1alpha.ICreateConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.IConversation,
        (protos.google.cloud.discoveryengine.v1alpha.ICreateConversationRequest | undefined),
        {} | undefined
    ]>;
    createConversation(request: protos.google.cloud.discoveryengine.v1alpha.ICreateConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IConversation, protos.google.cloud.discoveryengine.v1alpha.ICreateConversationRequest | null | undefined, {} | null | undefined>): void;
    createConversation(request: protos.google.cloud.discoveryengine.v1alpha.ICreateConversationRequest, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IConversation, protos.google.cloud.discoveryengine.v1alpha.ICreateConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a Conversation.
     *
     * If the {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation} to
     * delete does not exist, a NOT_FOUND error is returned.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Conversation to delete. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.delete_conversation.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_DeleteConversation_async
     */
    deleteConversation(request?: protos.google.cloud.discoveryengine.v1alpha.IDeleteConversationRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.discoveryengine.v1alpha.IDeleteConversationRequest | undefined),
        {} | undefined
    ]>;
    deleteConversation(request: protos.google.cloud.discoveryengine.v1alpha.IDeleteConversationRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.discoveryengine.v1alpha.IDeleteConversationRequest | null | undefined, {} | null | undefined>): void;
    deleteConversation(request: protos.google.cloud.discoveryengine.v1alpha.IDeleteConversationRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.discoveryengine.v1alpha.IDeleteConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a Conversation.
     *
     * {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation} action
     * type cannot be changed. If the
     * {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation} to update
     * does not exist, a NOT_FOUND error is returned.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.discoveryengine.v1alpha.Conversation} request.conversation
     *   Required. The Conversation to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Indicates which fields in the provided
     *   {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation} to
     *   update. The following are NOT supported:
     *
     *   * {@link protos.google.cloud.discoveryengine.v1alpha.Conversation.name|Conversation.name}
     *
     *   If not set or empty, all supported fields are updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.update_conversation.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_UpdateConversation_async
     */
    updateConversation(request?: protos.google.cloud.discoveryengine.v1alpha.IUpdateConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.IConversation,
        (protos.google.cloud.discoveryengine.v1alpha.IUpdateConversationRequest | undefined),
        {} | undefined
    ]>;
    updateConversation(request: protos.google.cloud.discoveryengine.v1alpha.IUpdateConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IConversation, protos.google.cloud.discoveryengine.v1alpha.IUpdateConversationRequest | null | undefined, {} | null | undefined>): void;
    updateConversation(request: protos.google.cloud.discoveryengine.v1alpha.IUpdateConversationRequest, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IConversation, protos.google.cloud.discoveryengine.v1alpha.IUpdateConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a Conversation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Conversation to get. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.get_conversation.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_GetConversation_async
     */
    getConversation(request?: protos.google.cloud.discoveryengine.v1alpha.IGetConversationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.IConversation,
        (protos.google.cloud.discoveryengine.v1alpha.IGetConversationRequest | undefined),
        {} | undefined
    ]>;
    getConversation(request: protos.google.cloud.discoveryengine.v1alpha.IGetConversationRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IConversation, protos.google.cloud.discoveryengine.v1alpha.IGetConversationRequest | null | undefined, {} | null | undefined>): void;
    getConversation(request: protos.google.cloud.discoveryengine.v1alpha.IGetConversationRequest, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IConversation, protos.google.cloud.discoveryengine.v1alpha.IGetConversationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Answer query method.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.servingConfig
     *   Required. The resource name of the Search serving config, such as
     *   `projects/* /locations/global/collections/default_collection/engines/* /servingConfigs/default_serving_config`,
     *   or
     *   `projects/* /locations/global/collections/default_collection/dataStores/* /servingConfigs/default_serving_config`.
     *   This field is used to identify the serving configuration name, set
     *   of models used to make the search.
     * @param {google.cloud.discoveryengine.v1alpha.Query} request.query
     *   Required. Current user query.
     * @param {string} request.session
     *   The session resource name. Not required.
     *
     *   When session field is not set, the API is in sessionless mode.
     *
     *   We support auto session mode: users can use the wildcard symbol `-` as
     *   session ID.  A new ID will be automatically generated and assigned.
     * @param {google.cloud.discoveryengine.v1alpha.AnswerQueryRequest.SafetySpec} request.safetySpec
     *   Model specification.
     * @param {google.cloud.discoveryengine.v1alpha.AnswerQueryRequest.RelatedQuestionsSpec} request.relatedQuestionsSpec
     *   Related questions specification.
     * @param {google.cloud.discoveryengine.v1alpha.AnswerQueryRequest.AnswerGenerationSpec} request.answerGenerationSpec
     *   Answer generation specification.
     * @param {google.cloud.discoveryengine.v1alpha.AnswerQueryRequest.SearchSpec} request.searchSpec
     *   Search specification.
     * @param {google.cloud.discoveryengine.v1alpha.AnswerQueryRequest.QueryUnderstandingSpec} request.queryUnderstandingSpec
     *   Query understanding specification.
     * @param {boolean} request.asynchronousMode
     *   Asynchronous mode control.
     *
     *   If enabled, the response will be returned with answer/session resource
     *   name without final answer. The API users need to do the polling to get
     *   the latest status of answer/session by calling
     *   {@link protos.google.cloud.discoveryengine.v1alpha.ConversationalSearchService.GetAnswer|ConversationalSearchService.GetAnswer}
     *   or
     *   {@link protos.google.cloud.discoveryengine.v1alpha.ConversationalSearchService.GetSession|ConversationalSearchService.GetSession}
     *   method.
     * @param {string} request.userPseudoId
     *   A unique identifier for tracking visitors. For example, this could be
     *   implemented with an HTTP cookie, which should be able to uniquely identify
     *   a visitor on a single device. This unique identifier should not change if
     *   the visitor logs in or out of the website.
     *
     *   This field should NOT have a fixed value such as `unknown_visitor`.
     *
     *   The field must be a UTF-8 encoded string with a length limit of 128
     *   characters. Otherwise, an  `INVALID_ARGUMENT`  error is returned.
     * @param {number[]} request.userLabels
     *   The user labels applied to a resource must meet the following requirements:
     *
     *   * Each resource can have multiple labels, up to a maximum of 64.
     *   * Each label must be a key-value pair.
     *   * Keys have a minimum length of 1 character and a maximum length of 63
     *     characters and cannot be empty. Values can be empty and have a maximum
     *     length of 63 characters.
     *   * Keys and values can contain only lowercase letters, numeric characters,
     *     underscores, and dashes. All characters must use UTF-8 encoding, and
     *     international characters are allowed.
     *   * The key portion of a label must be unique. However, you can use the same
     *     key with multiple resources.
     *   * Keys must start with a lowercase letter or international character.
     *
     *   See [Google Cloud
     *   Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
     *   for more details.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.AnswerQueryResponse|AnswerQueryResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.answer_query.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_AnswerQuery_async
     */
    answerQuery(request?: protos.google.cloud.discoveryengine.v1alpha.IAnswerQueryRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.IAnswerQueryResponse,
        (protos.google.cloud.discoveryengine.v1alpha.IAnswerQueryRequest | undefined),
        {} | undefined
    ]>;
    answerQuery(request: protos.google.cloud.discoveryengine.v1alpha.IAnswerQueryRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IAnswerQueryResponse, protos.google.cloud.discoveryengine.v1alpha.IAnswerQueryRequest | null | undefined, {} | null | undefined>): void;
    answerQuery(request: protos.google.cloud.discoveryengine.v1alpha.IAnswerQueryRequest, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IAnswerQueryResponse, protos.google.cloud.discoveryengine.v1alpha.IAnswerQueryRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a Answer.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Answer to get. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/engines/{engine_id}/sessions/{session_id}/answers/{answer_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.Answer|Answer}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.get_answer.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_GetAnswer_async
     */
    getAnswer(request?: protos.google.cloud.discoveryengine.v1alpha.IGetAnswerRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.IAnswer,
        protos.google.cloud.discoveryengine.v1alpha.IGetAnswerRequest | undefined,
        {} | undefined
    ]>;
    getAnswer(request: protos.google.cloud.discoveryengine.v1alpha.IGetAnswerRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IAnswer, protos.google.cloud.discoveryengine.v1alpha.IGetAnswerRequest | null | undefined, {} | null | undefined>): void;
    getAnswer(request: protos.google.cloud.discoveryengine.v1alpha.IGetAnswerRequest, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.IAnswer, protos.google.cloud.discoveryengine.v1alpha.IGetAnswerRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a Session.
     *
     * If the {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session} to create
     * already exists, an ALREADY_EXISTS error is returned.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Full resource name of parent data store. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {google.cloud.discoveryengine.v1alpha.Session} request.session
     *   Required. The session to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.create_session.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_CreateSession_async
     */
    createSession(request?: protos.google.cloud.discoveryengine.v1alpha.ICreateSessionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.ISession,
        (protos.google.cloud.discoveryengine.v1alpha.ICreateSessionRequest | undefined),
        {} | undefined
    ]>;
    createSession(request: protos.google.cloud.discoveryengine.v1alpha.ICreateSessionRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.ISession, protos.google.cloud.discoveryengine.v1alpha.ICreateSessionRequest | null | undefined, {} | null | undefined>): void;
    createSession(request: protos.google.cloud.discoveryengine.v1alpha.ICreateSessionRequest, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.ISession, protos.google.cloud.discoveryengine.v1alpha.ICreateSessionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a Session.
     *
     * If the {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session} to delete
     * does not exist, a NOT_FOUND error is returned.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Session to delete. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.delete_session.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_DeleteSession_async
     */
    deleteSession(request?: protos.google.cloud.discoveryengine.v1alpha.IDeleteSessionRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.discoveryengine.v1alpha.IDeleteSessionRequest | undefined),
        {} | undefined
    ]>;
    deleteSession(request: protos.google.cloud.discoveryengine.v1alpha.IDeleteSessionRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.discoveryengine.v1alpha.IDeleteSessionRequest | null | undefined, {} | null | undefined>): void;
    deleteSession(request: protos.google.cloud.discoveryengine.v1alpha.IDeleteSessionRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.discoveryengine.v1alpha.IDeleteSessionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a Session.
     *
     * {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session} action type cannot
     * be changed. If the {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session}
     * to update does not exist, a NOT_FOUND error is returned.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.discoveryengine.v1alpha.Session} request.session
     *   Required. The Session to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Indicates which fields in the provided
     *   {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session} to update. The
     *   following are NOT supported:
     *
     *   * {@link protos.google.cloud.discoveryengine.v1alpha.Session.name|Session.name}
     *
     *   If not set or empty, all supported fields are updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.update_session.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_UpdateSession_async
     */
    updateSession(request?: protos.google.cloud.discoveryengine.v1alpha.IUpdateSessionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.ISession,
        (protos.google.cloud.discoveryengine.v1alpha.IUpdateSessionRequest | undefined),
        {} | undefined
    ]>;
    updateSession(request: protos.google.cloud.discoveryengine.v1alpha.IUpdateSessionRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.ISession, protos.google.cloud.discoveryengine.v1alpha.IUpdateSessionRequest | null | undefined, {} | null | undefined>): void;
    updateSession(request: protos.google.cloud.discoveryengine.v1alpha.IUpdateSessionRequest, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.ISession, protos.google.cloud.discoveryengine.v1alpha.IUpdateSessionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a Session.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Session to get. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.get_session.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_GetSession_async
     */
    getSession(request?: protos.google.cloud.discoveryengine.v1alpha.IGetSessionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.ISession,
        (protos.google.cloud.discoveryengine.v1alpha.IGetSessionRequest | undefined),
        {} | undefined
    ]>;
    getSession(request: protos.google.cloud.discoveryengine.v1alpha.IGetSessionRequest, options: CallOptions, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.ISession, protos.google.cloud.discoveryengine.v1alpha.IGetSessionRequest | null | undefined, {} | null | undefined>): void;
    getSession(request: protos.google.cloud.discoveryengine.v1alpha.IGetSessionRequest, callback: Callback<protos.google.cloud.discoveryengine.v1alpha.ISession, protos.google.cloud.discoveryengine.v1alpha.IGetSessionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists all Conversations by their parent
     * {@link protos.google.cloud.discoveryengine.v1alpha.DataStore|DataStore}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The data store resource name. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {number} request.pageSize
     *   Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListConversations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {string} request.filter
     *   A filter to apply on the list results. The supported features are:
     *   user_pseudo_id, state.
     *
     *   Example:
     *   "user_pseudo_id = some_id"
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `update_time`
     *     * `create_time`
     *     * `conversation_name`
     *
     *   Example:
     *   "update_time desc"
     *   "create_time"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listConversationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConversations(request?: protos.google.cloud.discoveryengine.v1alpha.IListConversationsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.IConversation[],
        protos.google.cloud.discoveryengine.v1alpha.IListConversationsRequest | null,
        protos.google.cloud.discoveryengine.v1alpha.IListConversationsResponse
    ]>;
    listConversations(request: protos.google.cloud.discoveryengine.v1alpha.IListConversationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.discoveryengine.v1alpha.IListConversationsRequest, protos.google.cloud.discoveryengine.v1alpha.IListConversationsResponse | null | undefined, protos.google.cloud.discoveryengine.v1alpha.IConversation>): void;
    listConversations(request: protos.google.cloud.discoveryengine.v1alpha.IListConversationsRequest, callback: PaginationCallback<protos.google.cloud.discoveryengine.v1alpha.IListConversationsRequest, protos.google.cloud.discoveryengine.v1alpha.IListConversationsResponse | null | undefined, protos.google.cloud.discoveryengine.v1alpha.IConversation>): void;
    /**
     * Equivalent to `listConversations`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The data store resource name. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {number} request.pageSize
     *   Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListConversations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {string} request.filter
     *   A filter to apply on the list results. The supported features are:
     *   user_pseudo_id, state.
     *
     *   Example:
     *   "user_pseudo_id = some_id"
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `update_time`
     *     * `create_time`
     *     * `conversation_name`
     *
     *   Example:
     *   "update_time desc"
     *   "create_time"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listConversationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConversationsStream(request?: protos.google.cloud.discoveryengine.v1alpha.IListConversationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listConversations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The data store resource name. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {number} request.pageSize
     *   Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListConversations` call.
     *   Provide this to retrieve the subsequent page.
     * @param {string} request.filter
     *   A filter to apply on the list results. The supported features are:
     *   user_pseudo_id, state.
     *
     *   Example:
     *   "user_pseudo_id = some_id"
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `update_time`
     *     * `create_time`
     *     * `conversation_name`
     *
     *   Example:
     *   "update_time desc"
     *   "create_time"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.discoveryengine.v1alpha.Conversation|Conversation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.list_conversations.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_ListConversations_async
     */
    listConversationsAsync(request?: protos.google.cloud.discoveryengine.v1alpha.IListConversationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.discoveryengine.v1alpha.IConversation>;
    /**
     * Lists all Sessions by their parent
     * {@link protos.google.cloud.discoveryengine.v1alpha.DataStore|DataStore}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The data store resource name. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {number} request.pageSize
     *   Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListSessions` call.
     *   Provide this to retrieve the subsequent page.
     * @param {string} request.filter
     *   A filter to apply on the list results. The supported features are:
     *   user_pseudo_id, state.
     *
     *   Example:
     *   "user_pseudo_id = some_id"
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `update_time`
     *     * `create_time`
     *     * `session_name`
     *
     *   Example:
     *   "update_time desc"
     *   "create_time"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listSessionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSessions(request?: protos.google.cloud.discoveryengine.v1alpha.IListSessionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.discoveryengine.v1alpha.ISession[],
        protos.google.cloud.discoveryengine.v1alpha.IListSessionsRequest | null,
        protos.google.cloud.discoveryengine.v1alpha.IListSessionsResponse
    ]>;
    listSessions(request: protos.google.cloud.discoveryengine.v1alpha.IListSessionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.discoveryengine.v1alpha.IListSessionsRequest, protos.google.cloud.discoveryengine.v1alpha.IListSessionsResponse | null | undefined, protos.google.cloud.discoveryengine.v1alpha.ISession>): void;
    listSessions(request: protos.google.cloud.discoveryengine.v1alpha.IListSessionsRequest, callback: PaginationCallback<protos.google.cloud.discoveryengine.v1alpha.IListSessionsRequest, protos.google.cloud.discoveryengine.v1alpha.IListSessionsResponse | null | undefined, protos.google.cloud.discoveryengine.v1alpha.ISession>): void;
    /**
     * Equivalent to `listSessions`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The data store resource name. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {number} request.pageSize
     *   Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListSessions` call.
     *   Provide this to retrieve the subsequent page.
     * @param {string} request.filter
     *   A filter to apply on the list results. The supported features are:
     *   user_pseudo_id, state.
     *
     *   Example:
     *   "user_pseudo_id = some_id"
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `update_time`
     *     * `create_time`
     *     * `session_name`
     *
     *   Example:
     *   "update_time desc"
     *   "create_time"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSessionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSessionsStream(request?: protos.google.cloud.discoveryengine.v1alpha.IListSessionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listSessions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The data store resource name. Format:
     *   `projects/{project_number}/locations/{location_id}/collections/{collection}/dataStores/{data_store_id}`
     * @param {number} request.pageSize
     *   Maximum number of results to return. If unspecified, defaults
     *   to 50. Max allowed value is 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListSessions` call.
     *   Provide this to retrieve the subsequent page.
     * @param {string} request.filter
     *   A filter to apply on the list results. The supported features are:
     *   user_pseudo_id, state.
     *
     *   Example:
     *   "user_pseudo_id = some_id"
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `update_time`
     *     * `create_time`
     *     * `session_name`
     *
     *   Example:
     *   "update_time desc"
     *   "create_time"
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.discoveryengine.v1alpha.Session|Session}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/conversational_search_service.list_sessions.js</caption>
     * region_tag:discoveryengine_v1alpha_generated_ConversationalSearchService_ListSessions_async
     */
    listSessionsAsync(request?: protos.google.cloud.discoveryengine.v1alpha.IListSessionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.discoveryengine.v1alpha.ISession>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Return a fully-qualified aclConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    aclConfigPath(project: string, location: string): string;
    /**
     * Parse the project from AclConfig resource.
     *
     * @param {string} aclConfigName
     *   A fully-qualified path representing AclConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAclConfigName(aclConfigName: string): string | number;
    /**
     * Parse the location from AclConfig resource.
     *
     * @param {string} aclConfigName
     *   A fully-qualified path representing AclConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAclConfigName(aclConfigName: string): string | number;
    /**
     * Return a fully-qualified engine resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} engine
     * @returns {string} Resource name string.
     */
    enginePath(project: string, location: string, collection: string, engine: string): string;
    /**
     * Parse the project from Engine resource.
     *
     * @param {string} engineName
     *   A fully-qualified path representing Engine resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEngineName(engineName: string): string | number;
    /**
     * Parse the location from Engine resource.
     *
     * @param {string} engineName
     *   A fully-qualified path representing Engine resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEngineName(engineName: string): string | number;
    /**
     * Parse the collection from Engine resource.
     *
     * @param {string} engineName
     *   A fully-qualified path representing Engine resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromEngineName(engineName: string): string | number;
    /**
     * Parse the engine from Engine resource.
     *
     * @param {string} engineName
     *   A fully-qualified path representing Engine resource.
     * @returns {string} A string representing the engine.
     */
    matchEngineFromEngineName(engineName: string): string | number;
    /**
     * Return a fully-qualified evaluation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} evaluation
     * @returns {string} Resource name string.
     */
    evaluationPath(project: string, location: string, evaluation: string): string;
    /**
     * Parse the project from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEvaluationName(evaluationName: string): string | number;
    /**
     * Parse the location from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEvaluationName(evaluationName: string): string | number;
    /**
     * Parse the evaluation from Evaluation resource.
     *
     * @param {string} evaluationName
     *   A fully-qualified path representing Evaluation resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromEvaluationName(evaluationName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStore resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStorePath(project: string, location: string, collection: string, dataStore: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStore resource.
     *
     * @param {string} projectLocationCollectionDataStoreName
     *   A fully-qualified path representing project_location_collection_data_store resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreName(projectLocationCollectionDataStoreName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStore resource.
     *
     * @param {string} projectLocationCollectionDataStoreName
     *   A fully-qualified path representing project_location_collection_data_store resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreName(projectLocationCollectionDataStoreName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStore resource.
     *
     * @param {string} projectLocationCollectionDataStoreName
     *   A fully-qualified path representing project_location_collection_data_store resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreName(projectLocationCollectionDataStoreName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStore resource.
     *
     * @param {string} projectLocationCollectionDataStoreName
     *   A fully-qualified path representing project_location_collection_data_store resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreName(projectLocationCollectionDataStoreName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreBranchDocument resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} branch
     * @param {string} document
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreBranchDocumentPath(project: string, location: string, collection: string, dataStore: string, branch: string, document: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the branch from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the document from ProjectLocationCollectionDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentName(projectLocationCollectionDataStoreBranchDocumentName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreBranchDocumentChunk resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} branch
     * @param {string} document
     * @param {string} chunk
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreBranchDocumentChunkPath(project: string, location: string, collection: string, dataStore: string, branch: string, document: string, chunk: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreBranchDocumentChunkName(projectLocationCollectionDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreBranchDocumentChunkName(projectLocationCollectionDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreBranchDocumentChunkName(projectLocationCollectionDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreBranchDocumentChunkName(projectLocationCollectionDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the branch from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationCollectionDataStoreBranchDocumentChunkName(projectLocationCollectionDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the document from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectLocationCollectionDataStoreBranchDocumentChunkName(projectLocationCollectionDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the chunk from ProjectLocationCollectionDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationCollectionDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_collection_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the chunk.
     */
    matchChunkFromProjectLocationCollectionDataStoreBranchDocumentChunkName(projectLocationCollectionDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreControl resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} control
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreControlPath(project: string, location: string, collection: string, dataStore: string, control: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreControl resource.
     *
     * @param {string} projectLocationCollectionDataStoreControlName
     *   A fully-qualified path representing project_location_collection_data_store_control resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreControlName(projectLocationCollectionDataStoreControlName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreControl resource.
     *
     * @param {string} projectLocationCollectionDataStoreControlName
     *   A fully-qualified path representing project_location_collection_data_store_control resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreControlName(projectLocationCollectionDataStoreControlName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreControl resource.
     *
     * @param {string} projectLocationCollectionDataStoreControlName
     *   A fully-qualified path representing project_location_collection_data_store_control resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreControlName(projectLocationCollectionDataStoreControlName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreControl resource.
     *
     * @param {string} projectLocationCollectionDataStoreControlName
     *   A fully-qualified path representing project_location_collection_data_store_control resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreControlName(projectLocationCollectionDataStoreControlName: string): string | number;
    /**
     * Parse the control from ProjectLocationCollectionDataStoreControl resource.
     *
     * @param {string} projectLocationCollectionDataStoreControlName
     *   A fully-qualified path representing project_location_collection_data_store_control resource.
     * @returns {string} A string representing the control.
     */
    matchControlFromProjectLocationCollectionDataStoreControlName(projectLocationCollectionDataStoreControlName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreConversation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} conversation
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreConversationPath(project: string, location: string, collection: string, dataStore: string, conversation: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Parse the conversation from ProjectLocationCollectionDataStoreConversation resource.
     *
     * @param {string} projectLocationCollectionDataStoreConversationName
     *   A fully-qualified path representing project_location_collection_data_store_conversation resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationCollectionDataStoreConversationName(projectLocationCollectionDataStoreConversationName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreCustomTuningModel resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} custom_tuning_model
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreCustomTuningModelPath(project: string, location: string, collection: string, dataStore: string, customTuningModel: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreCustomTuningModel resource.
     *
     * @param {string} projectLocationCollectionDataStoreCustomTuningModelName
     *   A fully-qualified path representing project_location_collection_data_store_custom_tuning_model resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreCustomTuningModelName(projectLocationCollectionDataStoreCustomTuningModelName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreCustomTuningModel resource.
     *
     * @param {string} projectLocationCollectionDataStoreCustomTuningModelName
     *   A fully-qualified path representing project_location_collection_data_store_custom_tuning_model resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreCustomTuningModelName(projectLocationCollectionDataStoreCustomTuningModelName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreCustomTuningModel resource.
     *
     * @param {string} projectLocationCollectionDataStoreCustomTuningModelName
     *   A fully-qualified path representing project_location_collection_data_store_custom_tuning_model resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreCustomTuningModelName(projectLocationCollectionDataStoreCustomTuningModelName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreCustomTuningModel resource.
     *
     * @param {string} projectLocationCollectionDataStoreCustomTuningModelName
     *   A fully-qualified path representing project_location_collection_data_store_custom_tuning_model resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreCustomTuningModelName(projectLocationCollectionDataStoreCustomTuningModelName: string): string | number;
    /**
     * Parse the custom_tuning_model from ProjectLocationCollectionDataStoreCustomTuningModel resource.
     *
     * @param {string} projectLocationCollectionDataStoreCustomTuningModelName
     *   A fully-qualified path representing project_location_collection_data_store_custom_tuning_model resource.
     * @returns {string} A string representing the custom_tuning_model.
     */
    matchCustomTuningModelFromProjectLocationCollectionDataStoreCustomTuningModelName(projectLocationCollectionDataStoreCustomTuningModelName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreDocumentProcessingConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreDocumentProcessingConfigPath(project: string, location: string, collection: string, dataStore: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreDocumentProcessingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreDocumentProcessingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_documentProcessingConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreDocumentProcessingConfigName(projectLocationCollectionDataStoreDocumentProcessingConfigName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreDocumentProcessingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreDocumentProcessingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_documentProcessingConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreDocumentProcessingConfigName(projectLocationCollectionDataStoreDocumentProcessingConfigName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreDocumentProcessingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreDocumentProcessingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_documentProcessingConfig resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreDocumentProcessingConfigName(projectLocationCollectionDataStoreDocumentProcessingConfigName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreDocumentProcessingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreDocumentProcessingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_documentProcessingConfig resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreDocumentProcessingConfigName(projectLocationCollectionDataStoreDocumentProcessingConfigName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreSchema resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} schema
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreSchemaPath(project: string, location: string, collection: string, dataStore: string, schema: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Parse the schema from ProjectLocationCollectionDataStoreSchema resource.
     *
     * @param {string} projectLocationCollectionDataStoreSchemaName
     *   A fully-qualified path representing project_location_collection_data_store_schema resource.
     * @returns {string} A string representing the schema.
     */
    matchSchemaFromProjectLocationCollectionDataStoreSchemaName(projectLocationCollectionDataStoreSchemaName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreServingConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} serving_config
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreServingConfigPath(project: string, location: string, collection: string, dataStore: string, servingConfig: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Parse the serving_config from ProjectLocationCollectionDataStoreServingConfig resource.
     *
     * @param {string} projectLocationCollectionDataStoreServingConfigName
     *   A fully-qualified path representing project_location_collection_data_store_serving_config resource.
     * @returns {string} A string representing the serving_config.
     */
    matchServingConfigFromProjectLocationCollectionDataStoreServingConfigName(projectLocationCollectionDataStoreServingConfigName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreSession resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} session
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreSessionPath(project: string, location: string, collection: string, dataStore: string, session: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreSession resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionName
     *   A fully-qualified path representing project_location_collection_data_store_session resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreSessionName(projectLocationCollectionDataStoreSessionName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreSession resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionName
     *   A fully-qualified path representing project_location_collection_data_store_session resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreSessionName(projectLocationCollectionDataStoreSessionName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreSession resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionName
     *   A fully-qualified path representing project_location_collection_data_store_session resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreSessionName(projectLocationCollectionDataStoreSessionName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreSession resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionName
     *   A fully-qualified path representing project_location_collection_data_store_session resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreSessionName(projectLocationCollectionDataStoreSessionName: string): string | number;
    /**
     * Parse the session from ProjectLocationCollectionDataStoreSession resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionName
     *   A fully-qualified path representing project_location_collection_data_store_session resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationCollectionDataStoreSessionName(projectLocationCollectionDataStoreSessionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreSessionAnswer resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} session
     * @param {string} answer
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreSessionAnswerPath(project: string, location: string, collection: string, dataStore: string, session: string, answer: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreSessionAnswerName(projectLocationCollectionDataStoreSessionAnswerName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreSessionAnswerName(projectLocationCollectionDataStoreSessionAnswerName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreSessionAnswerName(projectLocationCollectionDataStoreSessionAnswerName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreSessionAnswerName(projectLocationCollectionDataStoreSessionAnswerName: string): string | number;
    /**
     * Parse the session from ProjectLocationCollectionDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationCollectionDataStoreSessionAnswerName(projectLocationCollectionDataStoreSessionAnswerName: string): string | number;
    /**
     * Parse the answer from ProjectLocationCollectionDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_collection_data_store_session_answer resource.
     * @returns {string} A string representing the answer.
     */
    matchAnswerFromProjectLocationCollectionDataStoreSessionAnswerName(projectLocationCollectionDataStoreSessionAnswerName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreSiteSearchEngine resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreSiteSearchEnginePath(project: string, location: string, collection: string, dataStore: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
     *
     * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
     *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreSiteSearchEngineName(projectLocationCollectionDataStoreSiteSearchEngineName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
     *
     * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
     *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreSiteSearchEngineName(projectLocationCollectionDataStoreSiteSearchEngineName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
     *
     * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
     *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreSiteSearchEngineName(projectLocationCollectionDataStoreSiteSearchEngineName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreSiteSearchEngine resource.
     *
     * @param {string} projectLocationCollectionDataStoreSiteSearchEngineName
     *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreSiteSearchEngineName(projectLocationCollectionDataStoreSiteSearchEngineName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionDataStoreSiteSearchEngineTargetSite resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} data_store
     * @param {string} target_site
     * @returns {string} Resource name string.
     */
    projectLocationCollectionDataStoreSiteSearchEngineTargetSitePath(project: string, location: string, collection: string, dataStore: string, targetSite: string): string;
    /**
     * Parse the project from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
     *
     * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
     *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
     *
     * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
     *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
     *
     * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
     *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
     *
     * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
     *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string): string | number;
    /**
     * Parse the target_site from ProjectLocationCollectionDataStoreSiteSearchEngineTargetSite resource.
     *
     * @param {string} projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName
     *   A fully-qualified path representing project_location_collection_data_store_siteSearchEngine_target_site resource.
     * @returns {string} A string representing the target_site.
     */
    matchTargetSiteFromProjectLocationCollectionDataStoreSiteSearchEngineTargetSiteName(projectLocationCollectionDataStoreSiteSearchEngineTargetSiteName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionEngineControl resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} engine
     * @param {string} control
     * @returns {string} Resource name string.
     */
    projectLocationCollectionEngineControlPath(project: string, location: string, collection: string, engine: string, control: string): string;
    /**
     * Parse the project from ProjectLocationCollectionEngineControl resource.
     *
     * @param {string} projectLocationCollectionEngineControlName
     *   A fully-qualified path representing project_location_collection_engine_control resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionEngineControlName(projectLocationCollectionEngineControlName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionEngineControl resource.
     *
     * @param {string} projectLocationCollectionEngineControlName
     *   A fully-qualified path representing project_location_collection_engine_control resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionEngineControlName(projectLocationCollectionEngineControlName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionEngineControl resource.
     *
     * @param {string} projectLocationCollectionEngineControlName
     *   A fully-qualified path representing project_location_collection_engine_control resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionEngineControlName(projectLocationCollectionEngineControlName: string): string | number;
    /**
     * Parse the engine from ProjectLocationCollectionEngineControl resource.
     *
     * @param {string} projectLocationCollectionEngineControlName
     *   A fully-qualified path representing project_location_collection_engine_control resource.
     * @returns {string} A string representing the engine.
     */
    matchEngineFromProjectLocationCollectionEngineControlName(projectLocationCollectionEngineControlName: string): string | number;
    /**
     * Parse the control from ProjectLocationCollectionEngineControl resource.
     *
     * @param {string} projectLocationCollectionEngineControlName
     *   A fully-qualified path representing project_location_collection_engine_control resource.
     * @returns {string} A string representing the control.
     */
    matchControlFromProjectLocationCollectionEngineControlName(projectLocationCollectionEngineControlName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionEngineConversation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} engine
     * @param {string} conversation
     * @returns {string} Resource name string.
     */
    projectLocationCollectionEngineConversationPath(project: string, location: string, collection: string, engine: string, conversation: string): string;
    /**
     * Parse the project from ProjectLocationCollectionEngineConversation resource.
     *
     * @param {string} projectLocationCollectionEngineConversationName
     *   A fully-qualified path representing project_location_collection_engine_conversation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionEngineConversationName(projectLocationCollectionEngineConversationName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionEngineConversation resource.
     *
     * @param {string} projectLocationCollectionEngineConversationName
     *   A fully-qualified path representing project_location_collection_engine_conversation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionEngineConversationName(projectLocationCollectionEngineConversationName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionEngineConversation resource.
     *
     * @param {string} projectLocationCollectionEngineConversationName
     *   A fully-qualified path representing project_location_collection_engine_conversation resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionEngineConversationName(projectLocationCollectionEngineConversationName: string): string | number;
    /**
     * Parse the engine from ProjectLocationCollectionEngineConversation resource.
     *
     * @param {string} projectLocationCollectionEngineConversationName
     *   A fully-qualified path representing project_location_collection_engine_conversation resource.
     * @returns {string} A string representing the engine.
     */
    matchEngineFromProjectLocationCollectionEngineConversationName(projectLocationCollectionEngineConversationName: string): string | number;
    /**
     * Parse the conversation from ProjectLocationCollectionEngineConversation resource.
     *
     * @param {string} projectLocationCollectionEngineConversationName
     *   A fully-qualified path representing project_location_collection_engine_conversation resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationCollectionEngineConversationName(projectLocationCollectionEngineConversationName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionEngineServingConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} engine
     * @param {string} serving_config
     * @returns {string} Resource name string.
     */
    projectLocationCollectionEngineServingConfigPath(project: string, location: string, collection: string, engine: string, servingConfig: string): string;
    /**
     * Parse the project from ProjectLocationCollectionEngineServingConfig resource.
     *
     * @param {string} projectLocationCollectionEngineServingConfigName
     *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionEngineServingConfigName(projectLocationCollectionEngineServingConfigName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionEngineServingConfig resource.
     *
     * @param {string} projectLocationCollectionEngineServingConfigName
     *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionEngineServingConfigName(projectLocationCollectionEngineServingConfigName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionEngineServingConfig resource.
     *
     * @param {string} projectLocationCollectionEngineServingConfigName
     *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionEngineServingConfigName(projectLocationCollectionEngineServingConfigName: string): string | number;
    /**
     * Parse the engine from ProjectLocationCollectionEngineServingConfig resource.
     *
     * @param {string} projectLocationCollectionEngineServingConfigName
     *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
     * @returns {string} A string representing the engine.
     */
    matchEngineFromProjectLocationCollectionEngineServingConfigName(projectLocationCollectionEngineServingConfigName: string): string | number;
    /**
     * Parse the serving_config from ProjectLocationCollectionEngineServingConfig resource.
     *
     * @param {string} projectLocationCollectionEngineServingConfigName
     *   A fully-qualified path representing project_location_collection_engine_serving_config resource.
     * @returns {string} A string representing the serving_config.
     */
    matchServingConfigFromProjectLocationCollectionEngineServingConfigName(projectLocationCollectionEngineServingConfigName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionEngineSession resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} engine
     * @param {string} session
     * @returns {string} Resource name string.
     */
    projectLocationCollectionEngineSessionPath(project: string, location: string, collection: string, engine: string, session: string): string;
    /**
     * Parse the project from ProjectLocationCollectionEngineSession resource.
     *
     * @param {string} projectLocationCollectionEngineSessionName
     *   A fully-qualified path representing project_location_collection_engine_session resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionEngineSessionName(projectLocationCollectionEngineSessionName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionEngineSession resource.
     *
     * @param {string} projectLocationCollectionEngineSessionName
     *   A fully-qualified path representing project_location_collection_engine_session resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionEngineSessionName(projectLocationCollectionEngineSessionName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionEngineSession resource.
     *
     * @param {string} projectLocationCollectionEngineSessionName
     *   A fully-qualified path representing project_location_collection_engine_session resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionEngineSessionName(projectLocationCollectionEngineSessionName: string): string | number;
    /**
     * Parse the engine from ProjectLocationCollectionEngineSession resource.
     *
     * @param {string} projectLocationCollectionEngineSessionName
     *   A fully-qualified path representing project_location_collection_engine_session resource.
     * @returns {string} A string representing the engine.
     */
    matchEngineFromProjectLocationCollectionEngineSessionName(projectLocationCollectionEngineSessionName: string): string | number;
    /**
     * Parse the session from ProjectLocationCollectionEngineSession resource.
     *
     * @param {string} projectLocationCollectionEngineSessionName
     *   A fully-qualified path representing project_location_collection_engine_session resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationCollectionEngineSessionName(projectLocationCollectionEngineSessionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationCollectionEngineSessionAnswer resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} collection
     * @param {string} engine
     * @param {string} session
     * @param {string} answer
     * @returns {string} Resource name string.
     */
    projectLocationCollectionEngineSessionAnswerPath(project: string, location: string, collection: string, engine: string, session: string, answer: string): string;
    /**
     * Parse the project from ProjectLocationCollectionEngineSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionEngineSessionAnswerName
     *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationCollectionEngineSessionAnswerName(projectLocationCollectionEngineSessionAnswerName: string): string | number;
    /**
     * Parse the location from ProjectLocationCollectionEngineSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionEngineSessionAnswerName
     *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationCollectionEngineSessionAnswerName(projectLocationCollectionEngineSessionAnswerName: string): string | number;
    /**
     * Parse the collection from ProjectLocationCollectionEngineSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionEngineSessionAnswerName
     *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
     * @returns {string} A string representing the collection.
     */
    matchCollectionFromProjectLocationCollectionEngineSessionAnswerName(projectLocationCollectionEngineSessionAnswerName: string): string | number;
    /**
     * Parse the engine from ProjectLocationCollectionEngineSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionEngineSessionAnswerName
     *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
     * @returns {string} A string representing the engine.
     */
    matchEngineFromProjectLocationCollectionEngineSessionAnswerName(projectLocationCollectionEngineSessionAnswerName: string): string | number;
    /**
     * Parse the session from ProjectLocationCollectionEngineSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionEngineSessionAnswerName
     *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationCollectionEngineSessionAnswerName(projectLocationCollectionEngineSessionAnswerName: string): string | number;
    /**
     * Parse the answer from ProjectLocationCollectionEngineSessionAnswer resource.
     *
     * @param {string} projectLocationCollectionEngineSessionAnswerName
     *   A fully-qualified path representing project_location_collection_engine_session_answer resource.
     * @returns {string} A string representing the answer.
     */
    matchAnswerFromProjectLocationCollectionEngineSessionAnswerName(projectLocationCollectionEngineSessionAnswerName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStore resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @returns {string} Resource name string.
     */
    projectLocationDataStorePath(project: string, location: string, dataStore: string): string;
    /**
     * Parse the project from ProjectLocationDataStore resource.
     *
     * @param {string} projectLocationDataStoreName
     *   A fully-qualified path representing project_location_data_store resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreName(projectLocationDataStoreName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStore resource.
     *
     * @param {string} projectLocationDataStoreName
     *   A fully-qualified path representing project_location_data_store resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreName(projectLocationDataStoreName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStore resource.
     *
     * @param {string} projectLocationDataStoreName
     *   A fully-qualified path representing project_location_data_store resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreName(projectLocationDataStoreName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreBranchDocument resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} branch
     * @param {string} document
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreBranchDocumentPath(project: string, location: string, dataStore: string, branch: string, document: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the branch from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Parse the document from ProjectLocationDataStoreBranchDocument resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentName
     *   A fully-qualified path representing project_location_data_store_branch_document resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectLocationDataStoreBranchDocumentName(projectLocationDataStoreBranchDocumentName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreBranchDocumentChunk resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} branch
     * @param {string} document
     * @param {string} chunk
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreBranchDocumentChunkPath(project: string, location: string, dataStore: string, branch: string, document: string, chunk: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreBranchDocumentChunkName(projectLocationDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreBranchDocumentChunkName(projectLocationDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreBranchDocumentChunkName(projectLocationDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the branch from ProjectLocationDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the branch.
     */
    matchBranchFromProjectLocationDataStoreBranchDocumentChunkName(projectLocationDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the document from ProjectLocationDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the document.
     */
    matchDocumentFromProjectLocationDataStoreBranchDocumentChunkName(projectLocationDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Parse the chunk from ProjectLocationDataStoreBranchDocumentChunk resource.
     *
     * @param {string} projectLocationDataStoreBranchDocumentChunkName
     *   A fully-qualified path representing project_location_data_store_branch_document_chunk resource.
     * @returns {string} A string representing the chunk.
     */
    matchChunkFromProjectLocationDataStoreBranchDocumentChunkName(projectLocationDataStoreBranchDocumentChunkName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreControl resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} control
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreControlPath(project: string, location: string, dataStore: string, control: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreControl resource.
     *
     * @param {string} projectLocationDataStoreControlName
     *   A fully-qualified path representing project_location_data_store_control resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreControlName(projectLocationDataStoreControlName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreControl resource.
     *
     * @param {string} projectLocationDataStoreControlName
     *   A fully-qualified path representing project_location_data_store_control resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreControlName(projectLocationDataStoreControlName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreControl resource.
     *
     * @param {string} projectLocationDataStoreControlName
     *   A fully-qualified path representing project_location_data_store_control resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreControlName(projectLocationDataStoreControlName: string): string | number;
    /**
     * Parse the control from ProjectLocationDataStoreControl resource.
     *
     * @param {string} projectLocationDataStoreControlName
     *   A fully-qualified path representing project_location_data_store_control resource.
     * @returns {string} A string representing the control.
     */
    matchControlFromProjectLocationDataStoreControlName(projectLocationDataStoreControlName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreConversation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} conversation
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreConversationPath(project: string, location: string, dataStore: string, conversation: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName: string): string | number;
    /**
     * Parse the conversation from ProjectLocationDataStoreConversation resource.
     *
     * @param {string} projectLocationDataStoreConversationName
     *   A fully-qualified path representing project_location_data_store_conversation resource.
     * @returns {string} A string representing the conversation.
     */
    matchConversationFromProjectLocationDataStoreConversationName(projectLocationDataStoreConversationName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreCustomTuningModel resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} custom_tuning_model
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreCustomTuningModelPath(project: string, location: string, dataStore: string, customTuningModel: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreCustomTuningModel resource.
     *
     * @param {string} projectLocationDataStoreCustomTuningModelName
     *   A fully-qualified path representing project_location_data_store_custom_tuning_model resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreCustomTuningModelName(projectLocationDataStoreCustomTuningModelName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreCustomTuningModel resource.
     *
     * @param {string} projectLocationDataStoreCustomTuningModelName
     *   A fully-qualified path representing project_location_data_store_custom_tuning_model resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreCustomTuningModelName(projectLocationDataStoreCustomTuningModelName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreCustomTuningModel resource.
     *
     * @param {string} projectLocationDataStoreCustomTuningModelName
     *   A fully-qualified path representing project_location_data_store_custom_tuning_model resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreCustomTuningModelName(projectLocationDataStoreCustomTuningModelName: string): string | number;
    /**
     * Parse the custom_tuning_model from ProjectLocationDataStoreCustomTuningModel resource.
     *
     * @param {string} projectLocationDataStoreCustomTuningModelName
     *   A fully-qualified path representing project_location_data_store_custom_tuning_model resource.
     * @returns {string} A string representing the custom_tuning_model.
     */
    matchCustomTuningModelFromProjectLocationDataStoreCustomTuningModelName(projectLocationDataStoreCustomTuningModelName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreDocumentProcessingConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreDocumentProcessingConfigPath(project: string, location: string, dataStore: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreDocumentProcessingConfig resource.
     *
     * @param {string} projectLocationDataStoreDocumentProcessingConfigName
     *   A fully-qualified path representing project_location_data_store_documentProcessingConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreDocumentProcessingConfigName(projectLocationDataStoreDocumentProcessingConfigName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreDocumentProcessingConfig resource.
     *
     * @param {string} projectLocationDataStoreDocumentProcessingConfigName
     *   A fully-qualified path representing project_location_data_store_documentProcessingConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreDocumentProcessingConfigName(projectLocationDataStoreDocumentProcessingConfigName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreDocumentProcessingConfig resource.
     *
     * @param {string} projectLocationDataStoreDocumentProcessingConfigName
     *   A fully-qualified path representing project_location_data_store_documentProcessingConfig resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreDocumentProcessingConfigName(projectLocationDataStoreDocumentProcessingConfigName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreSchema resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} schema
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreSchemaPath(project: string, location: string, dataStore: string, schema: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName: string): string | number;
    /**
     * Parse the schema from ProjectLocationDataStoreSchema resource.
     *
     * @param {string} projectLocationDataStoreSchemaName
     *   A fully-qualified path representing project_location_data_store_schema resource.
     * @returns {string} A string representing the schema.
     */
    matchSchemaFromProjectLocationDataStoreSchemaName(projectLocationDataStoreSchemaName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreServingConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} serving_config
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreServingConfigPath(project: string, location: string, dataStore: string, servingConfig: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreServingConfig resource.
     *
     * @param {string} projectLocationDataStoreServingConfigName
     *   A fully-qualified path representing project_location_data_store_serving_config resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreServingConfigName(projectLocationDataStoreServingConfigName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreServingConfig resource.
     *
     * @param {string} projectLocationDataStoreServingConfigName
     *   A fully-qualified path representing project_location_data_store_serving_config resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreServingConfigName(projectLocationDataStoreServingConfigName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreServingConfig resource.
     *
     * @param {string} projectLocationDataStoreServingConfigName
     *   A fully-qualified path representing project_location_data_store_serving_config resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreServingConfigName(projectLocationDataStoreServingConfigName: string): string | number;
    /**
     * Parse the serving_config from ProjectLocationDataStoreServingConfig resource.
     *
     * @param {string} projectLocationDataStoreServingConfigName
     *   A fully-qualified path representing project_location_data_store_serving_config resource.
     * @returns {string} A string representing the serving_config.
     */
    matchServingConfigFromProjectLocationDataStoreServingConfigName(projectLocationDataStoreServingConfigName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreSession resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} session
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreSessionPath(project: string, location: string, dataStore: string, session: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreSession resource.
     *
     * @param {string} projectLocationDataStoreSessionName
     *   A fully-qualified path representing project_location_data_store_session resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreSessionName(projectLocationDataStoreSessionName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreSession resource.
     *
     * @param {string} projectLocationDataStoreSessionName
     *   A fully-qualified path representing project_location_data_store_session resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreSessionName(projectLocationDataStoreSessionName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreSession resource.
     *
     * @param {string} projectLocationDataStoreSessionName
     *   A fully-qualified path representing project_location_data_store_session resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreSessionName(projectLocationDataStoreSessionName: string): string | number;
    /**
     * Parse the session from ProjectLocationDataStoreSession resource.
     *
     * @param {string} projectLocationDataStoreSessionName
     *   A fully-qualified path representing project_location_data_store_session resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationDataStoreSessionName(projectLocationDataStoreSessionName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreSessionAnswer resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} session
     * @param {string} answer
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreSessionAnswerPath(project: string, location: string, dataStore: string, session: string, answer: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_data_store_session_answer resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreSessionAnswerName(projectLocationDataStoreSessionAnswerName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_data_store_session_answer resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreSessionAnswerName(projectLocationDataStoreSessionAnswerName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_data_store_session_answer resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreSessionAnswerName(projectLocationDataStoreSessionAnswerName: string): string | number;
    /**
     * Parse the session from ProjectLocationDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_data_store_session_answer resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectLocationDataStoreSessionAnswerName(projectLocationDataStoreSessionAnswerName: string): string | number;
    /**
     * Parse the answer from ProjectLocationDataStoreSessionAnswer resource.
     *
     * @param {string} projectLocationDataStoreSessionAnswerName
     *   A fully-qualified path representing project_location_data_store_session_answer resource.
     * @returns {string} A string representing the answer.
     */
    matchAnswerFromProjectLocationDataStoreSessionAnswerName(projectLocationDataStoreSessionAnswerName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreSiteSearchEngine resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreSiteSearchEnginePath(project: string, location: string, dataStore: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreSiteSearchEngine resource.
     *
     * @param {string} projectLocationDataStoreSiteSearchEngineName
     *   A fully-qualified path representing project_location_data_store_siteSearchEngine resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreSiteSearchEngineName(projectLocationDataStoreSiteSearchEngineName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreSiteSearchEngine resource.
     *
     * @param {string} projectLocationDataStoreSiteSearchEngineName
     *   A fully-qualified path representing project_location_data_store_siteSearchEngine resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreSiteSearchEngineName(projectLocationDataStoreSiteSearchEngineName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreSiteSearchEngine resource.
     *
     * @param {string} projectLocationDataStoreSiteSearchEngineName
     *   A fully-qualified path representing project_location_data_store_siteSearchEngine resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreSiteSearchEngineName(projectLocationDataStoreSiteSearchEngineName: string): string | number;
    /**
     * Return a fully-qualified projectLocationDataStoreSiteSearchEngineTargetSite resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_store
     * @param {string} target_site
     * @returns {string} Resource name string.
     */
    projectLocationDataStoreSiteSearchEngineTargetSitePath(project: string, location: string, dataStore: string, targetSite: string): string;
    /**
     * Parse the project from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
     *
     * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
     *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(projectLocationDataStoreSiteSearchEngineTargetSiteName: string): string | number;
    /**
     * Parse the location from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
     *
     * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
     *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(projectLocationDataStoreSiteSearchEngineTargetSiteName: string): string | number;
    /**
     * Parse the data_store from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
     *
     * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
     *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
     * @returns {string} A string representing the data_store.
     */
    matchDataStoreFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(projectLocationDataStoreSiteSearchEngineTargetSiteName: string): string | number;
    /**
     * Parse the target_site from ProjectLocationDataStoreSiteSearchEngineTargetSite resource.
     *
     * @param {string} projectLocationDataStoreSiteSearchEngineTargetSiteName
     *   A fully-qualified path representing project_location_data_store_siteSearchEngine_target_site resource.
     * @returns {string} A string representing the target_site.
     */
    matchTargetSiteFromProjectLocationDataStoreSiteSearchEngineTargetSiteName(projectLocationDataStoreSiteSearchEngineTargetSiteName: string): string | number;
    /**
     * Return a fully-qualified sampleQuery resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} sample_query_set
     * @param {string} sample_query
     * @returns {string} Resource name string.
     */
    sampleQueryPath(project: string, location: string, sampleQuerySet: string, sampleQuery: string): string;
    /**
     * Parse the project from SampleQuery resource.
     *
     * @param {string} sampleQueryName
     *   A fully-qualified path representing SampleQuery resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSampleQueryName(sampleQueryName: string): string | number;
    /**
     * Parse the location from SampleQuery resource.
     *
     * @param {string} sampleQueryName
     *   A fully-qualified path representing SampleQuery resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSampleQueryName(sampleQueryName: string): string | number;
    /**
     * Parse the sample_query_set from SampleQuery resource.
     *
     * @param {string} sampleQueryName
     *   A fully-qualified path representing SampleQuery resource.
     * @returns {string} A string representing the sample_query_set.
     */
    matchSampleQuerySetFromSampleQueryName(sampleQueryName: string): string | number;
    /**
     * Parse the sample_query from SampleQuery resource.
     *
     * @param {string} sampleQueryName
     *   A fully-qualified path representing SampleQuery resource.
     * @returns {string} A string representing the sample_query.
     */
    matchSampleQueryFromSampleQueryName(sampleQueryName: string): string | number;
    /**
     * Return a fully-qualified sampleQuerySet resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} sample_query_set
     * @returns {string} Resource name string.
     */
    sampleQuerySetPath(project: string, location: string, sampleQuerySet: string): string;
    /**
     * Parse the project from SampleQuerySet resource.
     *
     * @param {string} sampleQuerySetName
     *   A fully-qualified path representing SampleQuerySet resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSampleQuerySetName(sampleQuerySetName: string): string | number;
    /**
     * Parse the location from SampleQuerySet resource.
     *
     * @param {string} sampleQuerySetName
     *   A fully-qualified path representing SampleQuerySet resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSampleQuerySetName(sampleQuerySetName: string): string | number;
    /**
     * Parse the sample_query_set from SampleQuerySet resource.
     *
     * @param {string} sampleQuerySetName
     *   A fully-qualified path representing SampleQuerySet resource.
     * @returns {string} A string representing the sample_query_set.
     */
    matchSampleQuerySetFromSampleQuerySetName(sampleQuerySetName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
